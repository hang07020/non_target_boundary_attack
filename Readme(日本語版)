# Non-Target Boundary Attack プロジェクト

## インストール

スクリプトを実行するには以下のPythonパッケージが必要です。pipでインストールできます。

```bash
pip install numpy matplotlib keras Pillow pandas opencv-python
```

---

## 概要

本リポジトリは、元のソースコード [boundary-attack-resnet.py](https://github.com/greentfrapp/boundary-attack) を改造した non-target boundary attack の実験用コードです。元のコードと重複する部分はコメントしていません。

### ソースコードファイルの説明

- **noise_nontarget_csv.py**：初期画像をノイズ画像として 2000 回の non-target boundary attack を実行  
- **mean_nontarget_csv.py**：初期画像を目標画像の平均値の単色画像として 2000 回の non-target boundary attack を実行  
- **upgreen_mean_nontarget_csv.py**：初期画像を目標画像の平均値で緑を強調した単色画像として 2000 回実行  
- **downgreen_mean_nontarget_csv.py**：初期画像を目標画像の平均値で緑を抑えた単色画像として 2000 回実行  
- **red_nontarget_csv.py**：初期画像を赤単色画像として 2000 回実行  
- **green_nontarget_csv.py**：初期画像を緑単色画像として 2000 回実行  
- **blue_nontarget_csv.py**：初期画像を青単色画像として 2000 回実行  

---

## 実行方法

Pythonでスクリプトを実行します：

```bash
python noise_nontarget_csv.py
```

うまく動作しない場合は、`worked program` フォルダ内のスクリプトを試してください。  
目標画像を変更する場合は、`boundary_attack()` 関数内の `target_sample` 変数のパスを変更します：

```python
target_sample = preprocess('images/original/seal.png')
```

---

## 元のソースコードとの改造点

### `noise_nontarget_csv.py` の場合

1. target boundary attack から non-target boundary attack に変更  
2. MSEをCSVファイルに記録

### その他のスクリプト (mean_nontarget_csv.py, upgreen_mean_nontarget_csv.py など)

1. target boundary attack から non-target boundary attack に変更  
2. MSEをCSVファイルに記録  
3. `get_sc_img(initial_sample)` 関数を追加し、初期画像の単色画像を生成  
4. 境界線まで最初の移動部分 (`# Move first step to the boundary`) を変更

---

## 現在の問題点

- 乱数を使用しているため、Boundary Attack が収束しない場合があります  
- 元の target boundary attack を改造したコードであり、まだ解明されていないバグが存在する可能性があります  
- 問題が解決されるまで、別の non-target boundary attack コードを利用することを推奨します

---

---

### 実験結果

非標的型境界攻撃の効率を分析するため、攻撃プロセス中の様々なステップにおいて、敵対的サンプルと元画像との間のMSE（平均二乗誤差）を測定しました。実験は、以下の異なる種類の初期画像を使用して実施されました。

* **Noise**: ランダムに生成されたノイズ画像
* **Mean**: ターゲット画像の平均色を表す単色画像
* **Red, Green, Blue**: 赤、緑、青の単色画像

結果を以下のグラフに示します。

![非標的型境界攻撃の収束性分析グラフ](graph.png)

#### 分析
このグラフは、初期画像の種類ごとの収束率を示しています。MSEがより速く減少するほど、攻撃の開始点として効率的であることを意味します。

* **最も効率的**: **Mean**（平均色）の画像（黄色の線）は、一貫して最も低いMSEを示しており、攻撃の開始点として最も効率的であることが示唆されます。収束が最も速く、クラス分類を誤らせるために必要な摂動（元画像からの変化）が最小限で済んでいます。
* **最も非効率**: **Noise**（ノイズ）画像（灰色の線）は、常に最も高いMSEを示し、最も非効率な開始点であることが分かります。
* **単色画像**: **赤、緑、青**の単色画像は互いに似た性能を示し、効率性はMeanとNoiseの中間に位置します。

この結果から、ターゲット画像と統計的特性（平均色など）が近い初期画像を使用するほど、境界攻撃アルゴリズムはより少ない摂動で誤分類を引き起こせる可能性が示唆されます。

## 開発者

Tan Yee Hang（タン・イーハン）  
作成日：2024/02/14  
連絡先：hang07020@gmail.com
